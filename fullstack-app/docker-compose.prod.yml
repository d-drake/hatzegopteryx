# Production Docker Compose - For local testing with production settings
# Note: In actual production, you'd use AWS services, not local containers

services:
  # No local postgres in production - using AWS RDS
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file: .env.prod
    environment:
      # Use AWS RDS connection string
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@<rds-endpoint>:5432/${POSTGRES_DB}
      PRODUCTION: "true"
      SENTRY_DSN: ${SENTRY_DSN}
      # JWT Configuration
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS}
      # Email Configuration
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM: ${MAIL_FROM}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_SERVER: ${MAIL_SERVER}
      MAIL_TLS: ${MAIL_TLS}
      MAIL_SSL: ${MAIL_SSL}
      # Superuser Configuration
      SUPERUSER_EMAIL: ${SUPERUSER_EMAIL}
      SUPERUSER_USERNAME: ${SUPERUSER_USERNAME}
      SUPERUSER_PASSWORD: ${SUPERUSER_PASSWORD}
      # CORS for production
      CORS_ORIGINS: "https://ccdh.me,https://www.ccdh.me"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile  # Use production Dockerfile
    ports:
      - "3000:3000"
    env_file: .env.prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped