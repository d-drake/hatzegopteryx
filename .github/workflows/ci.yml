name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      run: |
        # Add pytest command when tests are created
        python -c "import main; print('Backend imports successfully')"

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false
    
    - name: Build
      working-directory: ./frontend
      run: npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker compose build
    
    - name: Test Docker compose
      timeout-minutes: 15
      run: |
        echo "=== Starting Docker Compose Debug Session ==="
        echo "Starting containers without waiting for health checks..."
        
        # Start containers in background and immediately begin monitoring
        docker compose up -d --wait=false &
        COMPOSE_PID=$!
        
        echo "=== System resources ==="
        df -h
        free -h
        
        # Wait for compose command to finish
        wait $COMPOSE_PID
        echo "Docker compose up completed, starting monitoring..."
        
        echo "=== Initial container check ==="
        docker compose ps
        
        echo "=== Monitoring backend startup process ==="
        for i in {1..15}; do
          echo "--- Check $i/15 ($(date)) ---"
          
          echo "Container status:"
          docker compose ps backend
          
          echo "Backend logs (last 20 lines):"
          docker compose logs --tail=20 backend
          
          echo "Backend health status:"
          docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q backend) 2>/dev/null || echo "No health check or container not found"
          
          echo "Testing port 8000 availability:"
          if nc -z localhost 8000; then
            echo "✓ Port 8000 is open"
            echo "=== Testing health endpoint ==="
            if curl -f -s http://localhost:8000/health; then
              echo "✓ Health check successful"
              break
            else
              echo "✗ Health endpoint failed but port is open"
            fi
          else
            echo "✗ Port 8000 not yet available"
          fi
          
          if [ $i -lt 15 ]; then
            echo "Waiting 10 seconds before next check..."
            sleep 10
          fi
        done
        
        echo "=== Final status check ==="
        docker compose ps -a
        
        echo "=== Complete backend logs ==="
        docker compose logs backend
        
        echo "=== Complete postgres logs ==="
        docker compose logs postgres
        
        echo "=== Final health endpoint test ==="
        if curl -f -v http://localhost:8000/health; then
          echo "✓ Final health check successful"
        else
          echo "✗ Final health check failed"
          echo "=== Network debugging ==="
          netstat -tlnp | grep :8000 || echo "Port 8000 not listening"
          echo "=== Container inspection ==="
          docker compose ps -a
          docker compose exec backend ps aux || echo "Cannot exec into backend"
          exit 1
        fi
        
        echo "=== Cleanup ==="
        docker compose down