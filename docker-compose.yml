services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apppassword}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-appuser} -d ${POSTGRES_DB:-appdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    stop_grace_period: 30s
    stop_signal: SIGTERM
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-appuser}:${POSTGRES_PASSWORD:-apppassword}@postgres:5432/${POSTGRES_DB:-appdb}
    depends_on:
      postgres:
        condition: service_healthy
    command: bash startup.sh
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    stop_grace_period: 15s
    stop_signal: SIGTERM
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - __pycache__/
        - action: rebuild
          path: ./backend/requirements.txt

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
    stop_grace_period: 10s
    stop_signal: SIGTERM
    restart: unless-stopped
    develop:
      watch:
        - action: sync+restart
          path: ./frontend
          target: /app
          ignore:
            - node_modules/
            - .next/
        - action: rebuild
          path: ./frontend/package.json

  adminer:
    image: adminer:4.8.1
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      postgres:
        condition: service_healthy
    stop_grace_period: 5s
    stop_signal: SIGTERM
    restart: unless-stopped
    logging:
      options:
        max-size: "1m"

volumes:
  postgres_data: